#include <ESP32Servo.h>
#include <U8g2lib.h>

#define S0 25
#define S1 26
#define S2 33
#define S3 32
#define sensorOut 34

#define SERVO_PIN_GREEN 27
#define SERVO_PIN_ORANGE 13
#define SERVO_PIN_BACK 14  // Previously SERVO_PIN_RED


#define BUTTON_UP 18
#define BUTTON_DOWN 19
#define BUTTON_SELECT 5

Servo myservoGreen;
Servo myservoOrange;
Servo myservoBack;  // Previously myservoYellow


U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, U8X8_PIN_NONE);

const char* menuItems[] = {"Start Sorting", "Statistics"};
int menuIndex = 0;
bool isRunning = false;

// Timing variables
unsigned long previousMillis = 0;
const long colorCheckInterval = 500;
unsigned long servoActiveTime = 0;
bool servoActive = false;
int activeServo = -1;  // 0=Green, 1=Orange, 2=Red

// Button debouncing
unsigned long lastDebounceTime = 0;
const long debounceInterval = 200;

// Display message timing
unsigned long messageDisplayTime = 0;
bool messageActive = false;

// For Statistics Menu
int statisticsMenuIndex = 0;
bool inStatisticsMenu = false;
int countGreen = 0, countOrange = 0, countRed = 0;


bool detectionLock = false;
unsigned long cooldownStartTime = 0;
const long cooldownDuration = 800;  // Time to wait after sorting (adjust based on physical setup)
unsigned long lastObjectDetectionTime = 0;
const long objectTimeout = 2000;

void setup() {
  Serial.begin(115200);

  pinMode(S0, OUTPUT);
  pinMode(S1, OUTPUT);
  pinMode(S2, OUTPUT);
  pinMode(S3, OUTPUT);
  pinMode(sensorOut, INPUT);
  digitalWrite(S0, HIGH);
  digitalWrite(S1, LOW);

  pinMode(BUTTON_UP, INPUT_PULLUP);
  pinMode(BUTTON_DOWN, INPUT_PULLUP);
  pinMode(BUTTON_SELECT, INPUT_PULLUP);

  myservoGreen.attach(SERVO_PIN_GREEN);
  myservoGreen.write(0);
  myservoOrange.attach(SERVO_PIN_ORANGE);
  myservoOrange.write(0);
  myservoBack.attach(SERVO_PIN_BACK);
  myservoBack.write(90);

  u8g2.begin();
  displayMenu();

  Serial.println("Setup complete");
}

void loop() {
  unsigned long currentMillis = millis();

  // Handle servo timeout non-blocking
  if (servoActive && (currentMillis - servoActiveTime >= 1000)) {
    resetServo(activeServo);
    servoActive = false;
  }

  if (inStatisticsMenu) {
    handleStatisticsMenu(currentMillis);
    return;
  }

  if (!isRunning) {
    handleMainMenu(currentMillis);
  } else {
    handleSorting(currentMillis);
  }
}

void handleStatisticsMenu(unsigned long currentMillis) {
  if (checkButtonPress(BUTTON_UP, currentMillis)) {
    statisticsMenuIndex = (statisticsMenuIndex - 1 + 3) % 3;
    displayStatisticsMenu();
  }

  if (checkButtonPress(BUTTON_DOWN, currentMillis)) {
    statisticsMenuIndex = (statisticsMenuIndex + 1) % 3;
    displayStatisticsMenu();
  }

  if (checkButtonPress(BUTTON_SELECT, currentMillis)) {
    if (statisticsMenuIndex == 0) {
      // Show counts
      u8g2.clearBuffer();
      u8g2.setFont(u8g2_font_ncenB08_tr);
      u8g2.drawStr(0, 10, "Sorted this Session:");
      u8g2.drawStr(0, 25, ("Green: " + String(countGreen)).c_str());
      u8g2.drawStr(0, 40, ("Orange: " + String(countOrange)).c_str());
      u8g2.drawStr(0, 55, ("Red: " + String(countRed)).c_str());
      u8g2.sendBuffer();
      messageDisplayTime = currentMillis;
      messageActive = true;
    } else if (statisticsMenuIndex == 1) {
      // Reset counts
      countGreen = 0;
      countOrange = 0;
      countRed = 0;
      showTemporaryMessage("Counts Reset!", 1000);
    } else if (statisticsMenuIndex == 2) {
      // Return to main menu
      inStatisticsMenu = false;
      displayMenu();
    }
  }

  // Auto-return from statistics display
  if (messageActive && statisticsMenuIndex == 0 && 
      (currentMillis - messageDisplayTime >= 1000)) {
    messageActive = false;
    displayStatisticsMenu();
  }
}

void handleMainMenu(unsigned long currentMillis) {
  if (checkButtonPress(BUTTON_UP, currentMillis)) {
    menuIndex = (menuIndex - 1 + 2) % 2;
    displayMenu();
  }

  if (checkButtonPress(BUTTON_DOWN, currentMillis)) {
    menuIndex = (menuIndex + 1) % 2;
    displayMenu();
  }

  if (checkButtonPress(BUTTON_SELECT, currentMillis)) {
    if (menuIndex == 0) {
    // Open back servo before starting
    myservoBack.write(0);
    delay(500);  // Wait 0.5 seconds (OK here because it's before sorting loop)
    myservoBack.write(90);

    isRunning = true;
    showTemporaryMessage("Sorting Started...", 500);
    } else {
    inStatisticsMenu = true;
    statisticsMenuIndex = 0;
    displayStatisticsMenu();
    }
  }
}

void handleSorting(unsigned long currentMillis) {
  if (checkButtonPress(BUTTON_SELECT, currentMillis)) {
    isRunning = false;
    displayMenu();
    return;
  }

  // Handle servo timeout and cooldown
  if (servoActive) {
    if (currentMillis - servoActiveTime >= 1000) {
      resetServo(activeServo);
      servoActive = false;
      cooldownStartTime = currentMillis;  // Start cooldown after servo reset
    }
    else if (currentMillis - lastObjectDetectionTime >= objectTimeout) {
      // Safety timeout in case object gets stuck
      resetServo(activeServo);
      servoActive = false;
      cooldownStartTime = currentMillis;
      showTemporaryMessage("Object timeout!", 1000);
    }
  }

  // Check if we're ready to detect new objects
  bool canDetect = !servoActive && 
                  (currentMillis - cooldownStartTime >= cooldownDuration) && 
                  !detectionLock;

  if (canDetect && (currentMillis - previousMillis >= colorCheckInterval)) {
    previousMillis = currentMillis;
    
    int redFreq = getColorFrequency(LOW, LOW);
    int greenFreq = getColorFrequency(HIGH, HIGH);
    int blueFreq = getColorFrequency(LOW, HIGH);

    // Check if object is present
    if (redFreq > 1500 && greenFreq > 1500 && blueFreq > 1500) {
      detectionLock = false;  // Reset lock if no object
      showTemporaryMessage("No object detected", 500);
      return;
    }

    // Only process if we're not already handling an object
    if (!detectionLock) {
      detectionLock = true;
      lastObjectDetectionTime = currentMillis;

      String color = detectColor(redFreq, greenFreq, blueFreq);
      updateDisplay(color);
      activateServo(color);
    }
  }

  // Update display messages
  if (messageActive && (currentMillis - messageDisplayTime >= 500)) {
    messageActive = false;
    updateDisplay("");  // Clear message
  }
}

void activateServo(String color) {
  color.trim(); // remove spaces
  color.toLowerCase();

  if (color == "green") {
    countGreen++;
    myservoGreen.write(90);
    activeServo = 0;
  } else if (color == "orange") {
    countOrange++;
    myservoOrange.write(90);
    activeServo = 1;
  } else if (color == "red") {
    countRed++;
    activeServo = 2;
  }

  servoActive = true;
  servoActiveTime = millis();
}


void resetServo(int servoIndex) {
  switch(servoIndex) {
    case 0: myservoGreen.write(0); break;
    case 1: myservoOrange.write(0); break;
    case 2: myservoBack.write(90); break; // Replace with back logic if used

  }
  detectionLock = false;  // Release detection lock after servo reset
}

bool checkButtonPress(int button, unsigned long currentMillis) {
  if (digitalRead(button) == LOW) {
    if (currentMillis - lastDebounceTime >= debounceInterval) {
      lastDebounceTime = currentMillis;
      return true;
    }
  }
  return false;
}

void showTemporaryMessage(String message, long duration) {
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_ncenB08_tr);
  u8g2.drawStr(0, 30, message.c_str());
  u8g2.sendBuffer();
  messageDisplayTime = millis();
  messageActive = true;
}

void updateDisplay(String color) {
  if (messageActive) return;

  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_ncenB08_tr);
  u8g2.drawStr(0, 15, "Sorting...");
  if (!color.isEmpty()) {
    u8g2.drawStr(0, 35, ("Color: " + color).c_str());
  }
  u8g2.drawStr(0, 55, "Press Select to Return");
  u8g2.sendBuffer();
}

void displayMenu() {
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_ncenB10_tr);
  u8g2.drawStr(0, 12, "Tomato Sorter");

  u8g2.setFont(u8g2_font_ncenB08_tr);
  for (int i = 0; i < 2; i++) {
    if (i == menuIndex) {
      u8g2.drawStr(0, 30 + (i * 15), ("> " + String(menuItems[i])).c_str());
    } else {
      u8g2.drawStr(0, 30 + (i * 15), ("  " + String(menuItems[i])).c_str());
    }
  }
  u8g2.sendBuffer();
}

void displayStatisticsMenu() {
  const char* statsItems[] = {"Check Count", "Reset", "Return to Menu"};

  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_ncenB08_tr);
  u8g2.drawStr(0, 12, "Statistics");

  for (int i = 0; i < 3; i++) {
    if (i == statisticsMenuIndex) {
      u8g2.drawStr(0, 30 + (i * 15), ("> " + String(statsItems[i])).c_str());
    } else {
      u8g2.drawStr(0, 30 + (i * 15), ("  " + String(statsItems[i])).c_str());
    }
  }
  u8g2.sendBuffer();
}

int getColorFrequency(int s2State, int s3State) {
  digitalWrite(S2, s2State);
  digitalWrite(S3, s3State);
  delay(80);
  return pulseIn(sensorOut, LOW, 50000);
}

String detectColor(int red, int green, int blue) {
  int total = red + green + blue;
  if (total == 0) return "Unknown";

  float r = red / (float)total;
  float g = green / (float)total;
  float b = blue / (float)total;

  Serial.printf("Normalized: R=%.3f, G=%.3f, B=%.3f\n", r, g, b);

  // ðŸ”´ Red detection first
  if (g > 0.38f && r < 0.27f && b < 0.35f) {
    return "red";
  }

  // ðŸŸ  Orange detection second
  if (r < 0.24f && g > 0.33f && b > 0.42f && b < 0.45f) {
    return "orange";
  }

  // ðŸŸ¢ Green detection last
  if (r < 0.25f && g > 0.30f && b > 0.45f) {
    return "green";
  }

  return "Unknown";
}
